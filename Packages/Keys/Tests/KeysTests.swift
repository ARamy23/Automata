// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import KeysInterfaces
import XCTest
@testable import Keys

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xe2, 0x2f, 0x53, 0x88, 0xa, 0xed, 0x3d, 0xfe, 0x8f, 0x78, 0xac, 0xf9, 0x46, 0x4d, 0x34, 0x9c, 0x74, 0x73, 0x7b, 0xee, 0x3b, 0xba, 0x33, 0x92, 0x51, 0x38, 0x4f, 0xb6, 0xff, 0xb, 0xbe, 0x7f, 0x8f, 0xf4, 0x9b, 0xb5, 0xa7, 0xb5, 0x6c, 0x92, 0x90, 0x4f, 0xbc, 0x6c, 0x67, 0xce, 0x7a, 0xb8, 0x69, 0x9, 0xda, 0x7, 0xe5, 0xbe, 0x65, 0x66, 0xff, 0xd0, 0x4c, 0x53, 0xf6, 0x5c, 0xcd, 0xb4
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xd1, 0x4e, 0x36, 0xbd, 0x3d, 0xdc, 0x5b, 0xce, 0xb7, 0x1b, 0xca, 0x9b, 0x75, 0x74, 0x52, 0xad, 0x45, 0x4a, 0x48, 0x8a, 0x2, 0xd8, 0x6, 0xa7, 0x60, 0x8, 0x7f, 0x86, 0xc7, 0x3f, 0x8b, 0x46, 0xb9, 0xc4, 0xa8, 0x82, 0x97, 0x80, 0xa, 0xaa, 0xf5, 0x2c, 0x85, 0xa, 0x3, 0xf8, 0x42, 0x89, 0xa, 0x3b, 0xb8, 0x61, 0xd5, 0xd8, 0x52, 0x52, 0xc8, 0xe9, 0x2a, 0x30, 0x93, 0x68, 0xa8, 0x8c, 0x83, 0x1a, 0x63, 0xbc, 0x38, 0xdd, 0xe, 0xc9, 0xbe, 0x49, 0xc9, 0xc9, 0x70, 0x29, 0x50, 0xff, 0x41, 0x45, 0x4f, 0x8b, 0x9, 0x8f, 0x4, 0xab, 0x66, 0x59, 0x2d, 0x81, 0xcb, 0x6e, 0x89, 0x1a, 0xbd, 0xc7, 0xa2, 0x84, 0x97, 0x85, 0x8, 0xf0, 0xa3, 0x7f, 0x84, 0x5c, 0x51, 0xaa, 0x4b, 0x8a, 0x5d, 0x6d, 0xbc, 0x37, 0xdc, 0xdd, 0x54, 0x57, 0x9c, 0xb4, 0x79, 0x6b, 0xc0, 0x6e, 0xf9, 0x87
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "3ae571f08cfb39f1193d9b5510008459603705f8ec9fd681c2bf0f7479fce4e8a504203711e06ddc564e25797ab74e7e239100db30806d124df09c11cd586243")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x8b, 0x45, 0x36, 0xe4, 0x46, 0xb8, 0x4a, 0x9f, 0xbd, 0x15, 0xef, 0xac, 0x2, 0x79, 0x67, 0xd4, 0x3f, 0x3f, 0xd, 0x9f, 0x5e, 0xfc, 0x5d, 0xc5, 0x4, 0x5c, 0x78, 0x99, 0xb7, 0x78, 0x86, 0x4f, 0xcb, 0x95, 0xd8, 0x81, 0x93, 0xc1, 0x39, 0xf1, 0xf1, 0x5, 0x84, 0x58, 0x51, 0x94, 0x3b, 0xe2, 0x39, 0x7a, 0xef, 0x6d, 0x81, 0xcc, 0xe, 0x1, 0xc6, 0xe2, 0x7, 0x7c, 0xce, 0x2c, 0x9b, 0xd9, 0x8e, 0x58, 0xb, 0xfd, 0x43, 0xd8, 0x79, 0xb3, 0xfa, 0x3d, 0xcb, 0xa3, 0x8, 0x2, 0x2, 0xaf, 0x20, 0x18, 0x38, 0xc1, 0x6a, 0xfb, 0xe, 0xaf
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "ijelLUwa2mCUD4SHKLvqeFnWUd7/Hs80DaC44tUcaJ846ZAZPs5jdrkg92K/8pVmlwXuI5DMuEgZNO63TkC/QA==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x80, 0x1e, 0x31, 0xbc, 0x3f, 0xd8, 0xc, 0xcf, 0xa2, 0x4d, 0xc8, 0xca, 0x27, 0x60, 0, 0xa4, 0x4d, 0x45, 0x56, 0x8f, 0x5a, 0x8c, 0x50, 0xbf, 0x62, 0xf, 0x7c, 0x82, 0xc9, 0x33, 0x8c, 0x1c, 0xb8, 0xc7, 0xa8, 0xd1
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "b1b45511-5d3a-4896-aa6c-3734682c733d")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x96, 0x5d, 0x26, 0xed
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x84, 0x4e, 0x3f, 0xfb, 0x6f
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xd6, 0x1d
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xd2, 0x1f, 0x63, 0xb9
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xdb, 0x1d, 0x61, 0xbb, 0x39, 0xda, 0xf, 0xce, 0xbc, 0x4e, 0x94, 0xcc, 0x72, 0x7a, 0x3, 0xa9, 0x4c, 0x43, 0x4c, 0xd7, 0x9, 0x88, 0, 0xa1, 0x66, 0xa, 0x7f, 0x85, 0xc9, 0x33, 0x8b, 0x4b, 0xb8, 0xc3, 0xae, 0x8d, 0x97, 0x82
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xcf, 0x1b, 0x61
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xd1, 0x1, 0x62, 0xbc
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x90, 0x4a, 0x32, 0xe4, 0x55, 0xc9, 0x51, 0x97, 0xe2, 0x27, 0xdf, 0x91, 0x27, 0x29, 0x4d
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
